// <auto-generated />
using System;
using FertilityClinic.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FertilityClinic.DAL.Migrations
{
    [DbContext(typeof(FertilityClinicDbContext))]
    [Migration("20250602014648_fixappointmenttable")]
    partial class fixappointmenttable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FertilityClinic.DAL.Models.Appointment", b =>
                {
                    b.Property<int>("AppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppointmentId"));

                    b.Property<DateOnly>("AppointmentDate")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("AppointmentTime")
                        .HasColumnType("time");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("PartnerId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TreatmentMethodId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("AppointmentId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PartnerId");

                    b.HasIndex("TreatmentMethodId");

                    b.HasIndex("UserId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("FertilityClinic.DAL.Models.AppointmentHistory", b =>
                {
                    b.Property<int>("AppointmentHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppointmentHistoryId"));

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("AppointmentTime")
                        .HasColumnType("time");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DoctorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FloorNumber")
                        .HasColumnType("int");

                    b.Property<string>("MethodName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PartnerPatientName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PatientDOB")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PatientDOBDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PatientName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoomNumber")
                        .HasColumnType("int");

                    b.Property<string>("Section")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("AppointmentHistoryId");

                    b.HasIndex("UserId");

                    b.ToTable("AppointmentHistories");
                });

            modelBuilder.Entity("FertilityClinic.DAL.Models.Blog", b =>
                {
                    b.Property<int>("BlogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BlogId"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PublishedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ThumbnailUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("BlogId");

                    b.HasIndex("UserId");

                    b.ToTable("Blog");
                });

            modelBuilder.Entity("FertilityClinic.DAL.Models.Doctor", b =>
                {
                    b.Property<int>("DoctorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DoctorId"));

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Certifications")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Degree")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Education")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExperienceYears")
                        .HasColumnType("int");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("DoctorId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("FertilityClinic.DAL.Models.InjectionSchedule", b =>
                {
                    b.Property<int>("InjectionScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InjectionScheduleId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<string>("Dosage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InjectionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MedicationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TreatmentProcessId")
                        .HasColumnType("int");

                    b.Property<int?>("TreatmentProcessId1")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("InjectionScheduleId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("TreatmentProcessId");

                    b.HasIndex("TreatmentProcessId1");

                    b.ToTable("InjectionSchedules");
                });

            modelBuilder.Entity("FertilityClinic.DAL.Models.InseminationResult", b =>
                {
                    b.Property<int>("InseminationResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InseminationResultId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("InseminationScheduleId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ResultDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ResultDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("InseminationResultId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("InseminationScheduleId");

                    b.ToTable("InseminationResults");
                });

            modelBuilder.Entity("FertilityClinic.DAL.Models.InseminationSchedule", b =>
                {
                    b.Property<int>("InseminationScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InseminationScheduleId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("InseminationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TreatmentProcessId")
                        .HasColumnType("int");

                    b.Property<int?>("TreatmentProcessId1")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("InseminationScheduleId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("TreatmentProcessId");

                    b.HasIndex("TreatmentProcessId1");

                    b.ToTable("InseminationSchedules");
                });

            modelBuilder.Entity("FertilityClinic.DAL.Models.LabTestResult", b =>
                {
                    b.Property<int>("LabTestResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LabTestResultId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("LabTestScheduleId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ResultDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ResultDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("LabTestResultId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("LabTestScheduleId");

                    b.ToTable("LabTestResults");
                });

            modelBuilder.Entity("FertilityClinic.DAL.Models.LabTestSchedule", b =>
                {
                    b.Property<int>("LabTestScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LabTestScheduleId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TestDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TestType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TreatmentProcessId")
                        .HasColumnType("int");

                    b.Property<int?>("TreatmentProcessId1")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("LabTestScheduleId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("TreatmentProcessId");

                    b.HasIndex("TreatmentProcessId1");

                    b.ToTable("LabTestSchedules");
                });

            modelBuilder.Entity("FertilityClinic.DAL.Models.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("NotificationId");

                    b.HasIndex("UserId");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("FertilityClinic.DAL.Models.Partner", b =>
                {
                    b.Property<int>("PartnerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PartnerId"));

                    b.Property<DateOnly?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly?>("HealthInsuranceExpirationDate")
                        .HasColumnType("date");

                    b.Property<string>("HealthInsuranceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PartnerId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Partners");
                });

            modelBuilder.Entity("FertilityClinic.DAL.Models.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewId"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ReviewId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("FertilityClinic.DAL.Models.TreatmentMethod", b =>
                {
                    b.Property<int>("TreatmentMethodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TreatmentMethodId"));

                    b.Property<int?>("AverageDuration")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("MethodCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("MethodName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TechnicalRequirements")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TreatmentMethodId");

                    b.ToTable("TreatmentMethods");
                });

            modelBuilder.Entity("FertilityClinic.DAL.Models.TreatmentProcess", b =>
                {
                    b.Property<int>("TreatmentProcessId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TreatmentProcessId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("TreatmentMethodId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("TreatmentProcessId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("TreatmentMethodId");

                    b.HasIndex("UserId");

                    b.ToTable("TreatmentProcesses");
                });

            modelBuilder.Entity("FertilityClinic.DAL.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateOnly?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly?>("HealthInsuranceExpirationDate")
                        .HasColumnType("date");

                    b.Property<string>("HealthInsuranceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsMarried")
                        .HasColumnType("bit");

                    b.Property<string>("NationalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PartnerId")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("FertilityClinic.DAL.Models.Appointment", b =>
                {
                    b.HasOne("FertilityClinic.DAL.Models.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FertilityClinic.DAL.Models.Partner", "Partner")
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FertilityClinic.DAL.Models.TreatmentMethod", "TreatmentMethod")
                        .WithMany()
                        .HasForeignKey("TreatmentMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FertilityClinic.DAL.Models.User", "User")
                        .WithMany("Appointments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Partner");

                    b.Navigation("TreatmentMethod");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FertilityClinic.DAL.Models.AppointmentHistory", b =>
                {
                    b.HasOne("FertilityClinic.DAL.Models.User", "User")
                        .WithMany("GetAppointmentHistories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FertilityClinic.DAL.Models.Blog", b =>
                {
                    b.HasOne("FertilityClinic.DAL.Models.User", "User")
                        .WithMany("Blogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FertilityClinic.DAL.Models.Doctor", b =>
                {
                    b.HasOne("FertilityClinic.DAL.Models.User", "User")
                        .WithOne("Doctor")
                        .HasForeignKey("FertilityClinic.DAL.Models.Doctor", "UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FertilityClinic.DAL.Models.InjectionSchedule", b =>
                {
                    b.HasOne("FertilityClinic.DAL.Models.Doctor", "Doctor")
                        .WithMany("InjectionSchedules")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FertilityClinic.DAL.Models.TreatmentProcess", "TreatmentProcess")
                        .WithMany()
                        .HasForeignKey("TreatmentProcessId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FertilityClinic.DAL.Models.TreatmentProcess", null)
                        .WithMany("InjectionSchedules")
                        .HasForeignKey("TreatmentProcessId1");

                    b.Navigation("Doctor");

                    b.Navigation("TreatmentProcess");
                });

            modelBuilder.Entity("FertilityClinic.DAL.Models.InseminationResult", b =>
                {
                    b.HasOne("FertilityClinic.DAL.Models.Doctor", "Doctor")
                        .WithMany("InseminationResults")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FertilityClinic.DAL.Models.InseminationSchedule", "InseminationSchedule")
                        .WithMany()
                        .HasForeignKey("InseminationScheduleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("InseminationSchedule");
                });

            modelBuilder.Entity("FertilityClinic.DAL.Models.InseminationSchedule", b =>
                {
                    b.HasOne("FertilityClinic.DAL.Models.Doctor", "Doctor")
                        .WithMany("InseminationSchedules")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FertilityClinic.DAL.Models.TreatmentProcess", "TreatmentProcess")
                        .WithMany()
                        .HasForeignKey("TreatmentProcessId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FertilityClinic.DAL.Models.TreatmentProcess", null)
                        .WithMany("InseminationSchedules")
                        .HasForeignKey("TreatmentProcessId1");

                    b.Navigation("Doctor");

                    b.Navigation("TreatmentProcess");
                });

            modelBuilder.Entity("FertilityClinic.DAL.Models.LabTestResult", b =>
                {
                    b.HasOne("FertilityClinic.DAL.Models.Doctor", "Doctor")
                        .WithMany("LabTestResults")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FertilityClinic.DAL.Models.LabTestSchedule", "LabTestSchedule")
                        .WithMany()
                        .HasForeignKey("LabTestScheduleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("LabTestSchedule");
                });

            modelBuilder.Entity("FertilityClinic.DAL.Models.LabTestSchedule", b =>
                {
                    b.HasOne("FertilityClinic.DAL.Models.Doctor", "Doctor")
                        .WithMany("LabTestSchedules")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FertilityClinic.DAL.Models.TreatmentProcess", "TreatmentProcess")
                        .WithMany()
                        .HasForeignKey("TreatmentProcessId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FertilityClinic.DAL.Models.TreatmentProcess", null)
                        .WithMany("LabTestSchedules")
                        .HasForeignKey("TreatmentProcessId1");

                    b.Navigation("Doctor");

                    b.Navigation("TreatmentProcess");
                });

            modelBuilder.Entity("FertilityClinic.DAL.Models.Notification", b =>
                {
                    b.HasOne("FertilityClinic.DAL.Models.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FertilityClinic.DAL.Models.Partner", b =>
                {
                    b.HasOne("FertilityClinic.DAL.Models.User", "User")
                        .WithOne("Partner")
                        .HasForeignKey("FertilityClinic.DAL.Models.Partner", "UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FertilityClinic.DAL.Models.Review", b =>
                {
                    b.HasOne("FertilityClinic.DAL.Models.Doctor", "Doctor")
                        .WithMany("Reviews")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FertilityClinic.DAL.Models.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FertilityClinic.DAL.Models.TreatmentProcess", b =>
                {
                    b.HasOne("FertilityClinic.DAL.Models.Doctor", "Doctor")
                        .WithMany("TreatmentProcesses")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FertilityClinic.DAL.Models.TreatmentMethod", "TreatmentMethod")
                        .WithMany("TreatmentProcesses")
                        .HasForeignKey("TreatmentMethodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FertilityClinic.DAL.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("TreatmentMethod");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FertilityClinic.DAL.Models.Doctor", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("InjectionSchedules");

                    b.Navigation("InseminationResults");

                    b.Navigation("InseminationSchedules");

                    b.Navigation("LabTestResults");

                    b.Navigation("LabTestSchedules");

                    b.Navigation("Reviews");

                    b.Navigation("TreatmentProcesses");
                });

            modelBuilder.Entity("FertilityClinic.DAL.Models.TreatmentMethod", b =>
                {
                    b.Navigation("TreatmentProcesses");
                });

            modelBuilder.Entity("FertilityClinic.DAL.Models.TreatmentProcess", b =>
                {
                    b.Navigation("InjectionSchedules");

                    b.Navigation("InseminationSchedules");

                    b.Navigation("LabTestSchedules");
                });

            modelBuilder.Entity("FertilityClinic.DAL.Models.User", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Blogs");

                    b.Navigation("Doctor")
                        .IsRequired();

                    b.Navigation("GetAppointmentHistories");

                    b.Navigation("Notifications");

                    b.Navigation("Partner")
                        .IsRequired();

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
