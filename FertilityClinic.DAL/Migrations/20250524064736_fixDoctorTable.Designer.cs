// <auto-generated />
using System;
using FertilityClinic.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FertilityClinic.DAL.Migrations
{
    [DbContext(typeof(FertilityClinicDbContext))]
    [Migration("20250524064736_fixDoctorTable")]
    partial class fixDoctorTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FertilityClinic.DAL.Models.Appointment", b =>
                {
                    b.Property<int>("AppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppointmentId"));

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("AppointmentId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("FertilityClinic.DAL.Models.Blog", b =>
                {
                    b.Property<int>("BlogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BlogId"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PublishedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ThumbnailUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("BlogId");

                    b.HasIndex("UserId");

                    b.ToTable("Blog");
                });

            modelBuilder.Entity("FertilityClinic.DAL.Models.Doctor", b =>
                {
                    b.Property<int>("DoctorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DoctorId"));

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Certifications")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Degree")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Education")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExperienceYears")
                        .HasColumnType("int");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("DoctorId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("FertilityClinic.DAL.Models.InjectionSchedule", b =>
                {
                    b.Property<int>("InjectionScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InjectionScheduleId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<string>("Dosage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InjectionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MedicationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TreatmentProcessId")
                        .HasColumnType("int");

                    b.Property<int?>("TreatmentProcessId1")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("InjectionScheduleId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("TreatmentProcessId");

                    b.HasIndex("TreatmentProcessId1");

                    b.ToTable("InjectionSchedules");
                });

            modelBuilder.Entity("FertilityClinic.DAL.Models.InseminationResult", b =>
                {
                    b.Property<int>("InseminationResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InseminationResultId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("InseminationScheduleId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ResultDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ResultDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("InseminationResultId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("InseminationScheduleId");

                    b.ToTable("InseminationResults");
                });

            modelBuilder.Entity("FertilityClinic.DAL.Models.InseminationSchedule", b =>
                {
                    b.Property<int>("InseminationScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InseminationScheduleId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("InseminationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TreatmentProcessId")
                        .HasColumnType("int");

                    b.Property<int?>("TreatmentProcessId1")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("InseminationScheduleId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("TreatmentProcessId");

                    b.HasIndex("TreatmentProcessId1");

                    b.ToTable("InseminationSchedules");
                });

            modelBuilder.Entity("FertilityClinic.DAL.Models.LabTestResult", b =>
                {
                    b.Property<int>("LabTestResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LabTestResultId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("LabTestScheduleId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ResultDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ResultDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("LabTestResultId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("LabTestScheduleId");

                    b.ToTable("LabTestResults");
                });

            modelBuilder.Entity("FertilityClinic.DAL.Models.LabTestSchedule", b =>
                {
                    b.Property<int>("LabTestScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LabTestScheduleId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TestDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TestType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TreatmentProcessId")
                        .HasColumnType("int");

                    b.Property<int?>("TreatmentProcessId1")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("LabTestScheduleId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("TreatmentProcessId");

                    b.HasIndex("TreatmentProcessId1");

                    b.ToTable("LabTestSchedules");
                });

            modelBuilder.Entity("FertilityClinic.DAL.Models.MarriageCertificate", b =>
                {
                    b.Property<int>("CertificateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CertificateId"));

                    b.Property<string>("CertificateNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("DocumentUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IssuedBy")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("SpouseIdNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SpouseName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("VerificationStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CertificateId");

                    b.HasIndex("CertificateNumber")
                        .IsUnique();

                    b.HasIndex("PatientId");

                    b.ToTable("MarriageCertificates");
                });

            modelBuilder.Entity("FertilityClinic.DAL.Models.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("NotificationId");

                    b.HasIndex("UserId");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("FertilityClinic.DAL.Models.Patient", b =>
                {
                    b.Property<int>("PatientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("MedicalHistory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicalRecordCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PatientId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("FertilityClinic.DAL.Models.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewId"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ReviewId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Review");
                });

            modelBuilder.Entity("FertilityClinic.DAL.Models.TreatmentMethod", b =>
                {
                    b.Property<int>("TreatmentMethodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TreatmentMethodId"));

                    b.Property<int?>("AverageDuration")
                        .HasColumnType("int");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("MethodCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("MethodName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("RequiresMarriageCertificate")
                        .HasColumnType("bit");

                    b.Property<decimal?>("SuccessRate")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("TechnicalRequirements")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("TreatmentMethodId");

                    b.ToTable("TreatmentMethods");

                    b.HasData(
                        new
                        {
                            TreatmentMethodId = 1,
                            AverageDuration = 30,
                            Category = "Basic",
                            CreatedAt = new DateTime(2025, 5, 24, 6, 47, 35, 699, DateTimeKind.Utc).AddTicks(2069),
                            Description = "Bơm tinh trùng đã qua lọc rửa trực tiếp vào buồng tử cung.",
                            IsActive = true,
                            MethodCode = "IUI",
                            MethodName = "Bơm tinh trùng vào buồng tử cung",
                            RequiresMarriageCertificate = true,
                            SuccessRate = 15.00m,
                            TechnicalRequirements = "Tinh trùng đạt chất lượng, buồng tử cung bình thường",
                            UpdatedAt = new DateTime(2025, 5, 24, 6, 47, 35, 699, DateTimeKind.Utc).AddTicks(2070)
                        },
                        new
                        {
                            TreatmentMethodId = 2,
                            AverageDuration = 60,
                            Category = "Advanced",
                            CreatedAt = new DateTime(2025, 5, 24, 6, 47, 35, 699, DateTimeKind.Utc).AddTicks(2073),
                            Description = "Thụ tinh trứng và tinh trùng trong môi trường ống nghiệm.",
                            IsActive = true,
                            MethodCode = "IVF",
                            MethodName = "Thụ tinh trong ống nghiệm",
                            RequiresMarriageCertificate = true,
                            SuccessRate = 40.00m,
                            TechnicalRequirements = "Phòng lab IVF đạt chuẩn",
                            UpdatedAt = new DateTime(2025, 5, 24, 6, 47, 35, 699, DateTimeKind.Utc).AddTicks(2074)
                        },
                        new
                        {
                            TreatmentMethodId = 3,
                            AverageDuration = 60,
                            Category = "Advanced",
                            CreatedAt = new DateTime(2025, 5, 24, 6, 47, 35, 699, DateTimeKind.Utc).AddTicks(2076),
                            Description = "Tiêm trực tiếp một tinh trùng vào trứng để tăng khả năng thụ tinh.",
                            IsActive = true,
                            MethodCode = "ICSI",
                            MethodName = "Tiêm tinh trùng vào bào tương noãn",
                            RequiresMarriageCertificate = true,
                            SuccessRate = 50.00m,
                            TechnicalRequirements = "Máy vi thao tác, chuyên viên có tay nghề cao",
                            UpdatedAt = new DateTime(2025, 5, 24, 6, 47, 35, 699, DateTimeKind.Utc).AddTicks(2076)
                        },
                        new
                        {
                            TreatmentMethodId = 4,
                            AverageDuration = 3,
                            Category = "Advanced",
                            CreatedAt = new DateTime(2025, 5, 24, 6, 47, 35, 699, DateTimeKind.Utc).AddTicks(2078),
                            Description = "Tác động lên vỏ phôi để hỗ trợ thoát màng và tăng tỉ lệ làm tổ.",
                            IsActive = true,
                            MethodCode = "AH",
                            MethodName = "Hỗ trợ phôi thoát màng",
                            RequiresMarriageCertificate = true,
                            SuccessRate = 30.00m,
                            TechnicalRequirements = "Laser hỗ trợ phôi thoát màng",
                            UpdatedAt = new DateTime(2025, 5, 24, 6, 47, 35, 699, DateTimeKind.Utc).AddTicks(2079)
                        },
                        new
                        {
                            TreatmentMethodId = 5,
                            AverageDuration = 1,
                            Category = "Advanced",
                            CreatedAt = new DateTime(2025, 5, 24, 6, 47, 35, 699, DateTimeKind.Utc).AddTicks(2082),
                            Description = "Sử dụng dung dịch keo dính hỗ trợ phôi bám vào niêm mạc tử cung.",
                            IsActive = true,
                            MethodCode = "EmbryoGlue",
                            MethodName = "Kỹ thuật keo dính phôi",
                            RequiresMarriageCertificate = true,
                            SuccessRate = 20.00m,
                            TechnicalRequirements = "Dung dịch hỗ trợ gắn phôi",
                            UpdatedAt = new DateTime(2025, 5, 24, 6, 47, 35, 699, DateTimeKind.Utc).AddTicks(2082)
                        },
                        new
                        {
                            TreatmentMethodId = 6,
                            AverageDuration = 10,
                            Category = "Advanced",
                            CreatedAt = new DateTime(2025, 5, 24, 6, 47, 35, 699, DateTimeKind.Utc).AddTicks(2084),
                            Description = "Nuôi trưởng thành trứng non bên ngoài cơ thể trước khi thụ tinh.",
                            IsActive = true,
                            MethodCode = "IVM",
                            MethodName = "Trưởng thành trứng non",
                            RequiresMarriageCertificate = true,
                            SuccessRate = 35.00m,
                            TechnicalRequirements = "Môi trường nuôi trứng non",
                            UpdatedAt = new DateTime(2025, 5, 24, 6, 47, 35, 699, DateTimeKind.Utc).AddTicks(2085)
                        },
                        new
                        {
                            TreatmentMethodId = 7,
                            AverageDuration = 1,
                            Category = "Advanced",
                            CreatedAt = new DateTime(2025, 5, 24, 6, 47, 35, 699, DateTimeKind.Utc).AddTicks(2087),
                            Description = "Lấy một số tế bào từ phôi để xét nghiệm di truyền.",
                            IsActive = true,
                            MethodCode = "Biopsy",
                            MethodName = "Kỹ thuật sinh thiết phôi",
                            RequiresMarriageCertificate = true,
                            SuccessRate = 99.00m,
                            TechnicalRequirements = "Thiết bị sinh thiết, chuyên viên tay nghề cao",
                            UpdatedAt = new DateTime(2025, 5, 24, 6, 47, 35, 699, DateTimeKind.Utc).AddTicks(2087)
                        },
                        new
                        {
                            TreatmentMethodId = 8,
                            AverageDuration = 1,
                            Category = "Basic",
                            CreatedAt = new DateTime(2025, 5, 24, 6, 47, 35, 699, DateTimeKind.Utc).AddTicks(2089),
                            Description = "Chọc hút và thu thập trứng từ buồng trứng.",
                            IsActive = true,
                            MethodCode = "EggRetrieval",
                            MethodName = "Kỹ thuật gom trứng",
                            RequiresMarriageCertificate = true,
                            SuccessRate = 100.00m,
                            TechnicalRequirements = "Thiết bị siêu âm và hút trứng",
                            UpdatedAt = new DateTime(2025, 5, 24, 6, 47, 35, 699, DateTimeKind.Utc).AddTicks(2090)
                        },
                        new
                        {
                            TreatmentMethodId = 9,
                            AverageDuration = 30,
                            Category = "Preservation",
                            CreatedAt = new DateTime(2025, 5, 24, 6, 47, 35, 699, DateTimeKind.Utc).AddTicks(2092),
                            Description = "Bảo quản trứng ở nhiệt độ cực thấp để sử dụng sau.",
                            IsActive = true,
                            MethodCode = "EggFreezing",
                            MethodName = "Trữ đông noãn",
                            RequiresMarriageCertificate = false,
                            SuccessRate = 90.00m,
                            TechnicalRequirements = "Kỹ thuật trữ đông tiên tiến",
                            UpdatedAt = new DateTime(2025, 5, 24, 6, 47, 35, 699, DateTimeKind.Utc).AddTicks(2092)
                        },
                        new
                        {
                            TreatmentMethodId = 10,
                            AverageDuration = 30,
                            Category = "Preservation",
                            CreatedAt = new DateTime(2025, 5, 24, 6, 47, 35, 699, DateTimeKind.Utc).AddTicks(2094),
                            Description = "Trữ đông phôi để sử dụng trong chu kỳ điều trị sau.",
                            IsActive = true,
                            MethodCode = "EmbryoFreezing",
                            MethodName = "Trữ đông phôi",
                            RequiresMarriageCertificate = true,
                            SuccessRate = 85.00m,
                            TechnicalRequirements = "Kỹ thuật trữ đông phôi",
                            UpdatedAt = new DateTime(2025, 5, 24, 6, 47, 35, 699, DateTimeKind.Utc).AddTicks(2095)
                        },
                        new
                        {
                            TreatmentMethodId = 11,
                            AverageDuration = 1,
                            Category = "Preservation",
                            CreatedAt = new DateTime(2025, 5, 24, 6, 47, 35, 699, DateTimeKind.Utc).AddTicks(2097),
                            Description = "Trữ đông tinh trùng để sử dụng trong tương lai.",
                            IsActive = true,
                            MethodCode = "SpermFreezing",
                            MethodName = "Trữ đông tinh trùng",
                            RequiresMarriageCertificate = false,
                            SuccessRate = 90.00m,
                            TechnicalRequirements = "Nitơ lỏng bảo quản mẫu tinh trùng",
                            UpdatedAt = new DateTime(2025, 5, 24, 6, 47, 35, 699, DateTimeKind.Utc).AddTicks(2097)
                        },
                        new
                        {
                            TreatmentMethodId = 12,
                            AverageDuration = 7,
                            Category = "Surgical",
                            CreatedAt = new DateTime(2025, 5, 24, 6, 47, 35, 699, DateTimeKind.Utc).AddTicks(2099),
                            Description = "Nội soi buồng tử cung để chẩn đoán và điều trị vô sinh.",
                            IsActive = true,
                            MethodCode = "HSC",
                            MethodName = "Phẫu thuật nội soi buồng tử cung trong vô sinh",
                            RequiresMarriageCertificate = true,
                            SuccessRate = 60.00m,
                            TechnicalRequirements = "Phòng mổ nội soi, thiết bị nội soi buồng tử cung",
                            UpdatedAt = new DateTime(2025, 5, 24, 6, 47, 35, 699, DateTimeKind.Utc).AddTicks(2100)
                        },
                        new
                        {
                            TreatmentMethodId = 13,
                            AverageDuration = 1,
                            Category = "Surgical",
                            CreatedAt = new DateTime(2025, 5, 24, 6, 47, 35, 699, DateTimeKind.Utc).AddTicks(2102),
                            Description = "Phẫu thuật lấy tinh trùng trực tiếp từ mào tinh hoặc tinh hoàn.",
                            IsActive = true,
                            MethodCode = "PESA_TESA",
                            MethodName = "Lấy tinh trùng từ mào tinh và tinh hoàn",
                            RequiresMarriageCertificate = true,
                            SuccessRate = 70.00m,
                            TechnicalRequirements = "Phẫu thuật viên có chuyên môn, vô trùng tuyệt đối",
                            UpdatedAt = new DateTime(2025, 5, 24, 6, 47, 35, 699, DateTimeKind.Utc).AddTicks(2102)
                        },
                        new
                        {
                            TreatmentMethodId = 14,
                            AverageDuration = 1,
                            Category = "Basic",
                            CreatedAt = new DateTime(2025, 5, 24, 6, 47, 35, 699, DateTimeKind.Utc).AddTicks(2106),
                            Description = "Lọc rửa tinh trùng để tăng chất lượng trước IUI hoặc IVF.",
                            IsActive = true,
                            MethodCode = "SpermWash",
                            MethodName = "Lọc rửa tinh trùng",
                            RequiresMarriageCertificate = true,
                            SuccessRate = 100.00m,
                            TechnicalRequirements = "Thiết bị ly tâm, kỹ thuật viên chuyên môn",
                            UpdatedAt = new DateTime(2025, 5, 24, 6, 47, 35, 699, DateTimeKind.Utc).AddTicks(2106)
                        });
                });

            modelBuilder.Entity("FertilityClinic.DAL.Models.TreatmentProcess", b =>
                {
                    b.Property<int>("TreatmentProcessId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TreatmentProcessId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MarriageCertificateId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("TreatmentMethodId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("TreatmentProcessId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("MarriageCertificateId");

                    b.HasIndex("PatientId");

                    b.HasIndex("TreatmentMethodId");

                    b.ToTable("TreatmentProcesses");
                });

            modelBuilder.Entity("FertilityClinic.DAL.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateOnly?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("FertilityClinic.DAL.Models.Appointment", b =>
                {
                    b.HasOne("FertilityClinic.DAL.Models.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FertilityClinic.DAL.Models.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("FertilityClinic.DAL.Models.Blog", b =>
                {
                    b.HasOne("FertilityClinic.DAL.Models.User", "User")
                        .WithMany("Blogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FertilityClinic.DAL.Models.Doctor", b =>
                {
                    b.HasOne("FertilityClinic.DAL.Models.User", "User")
                        .WithOne("Doctor")
                        .HasForeignKey("FertilityClinic.DAL.Models.Doctor", "UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FertilityClinic.DAL.Models.InjectionSchedule", b =>
                {
                    b.HasOne("FertilityClinic.DAL.Models.Doctor", "Doctor")
                        .WithMany("InjectionSchedules")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FertilityClinic.DAL.Models.TreatmentProcess", "TreatmentProcess")
                        .WithMany()
                        .HasForeignKey("TreatmentProcessId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FertilityClinic.DAL.Models.TreatmentProcess", null)
                        .WithMany("InjectionSchedules")
                        .HasForeignKey("TreatmentProcessId1");

                    b.Navigation("Doctor");

                    b.Navigation("TreatmentProcess");
                });

            modelBuilder.Entity("FertilityClinic.DAL.Models.InseminationResult", b =>
                {
                    b.HasOne("FertilityClinic.DAL.Models.Doctor", "Doctor")
                        .WithMany("InseminationResults")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FertilityClinic.DAL.Models.InseminationSchedule", "InseminationSchedule")
                        .WithMany()
                        .HasForeignKey("InseminationScheduleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("InseminationSchedule");
                });

            modelBuilder.Entity("FertilityClinic.DAL.Models.InseminationSchedule", b =>
                {
                    b.HasOne("FertilityClinic.DAL.Models.Doctor", "Doctor")
                        .WithMany("InseminationSchedules")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FertilityClinic.DAL.Models.TreatmentProcess", "TreatmentProcess")
                        .WithMany()
                        .HasForeignKey("TreatmentProcessId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FertilityClinic.DAL.Models.TreatmentProcess", null)
                        .WithMany("InseminationSchedules")
                        .HasForeignKey("TreatmentProcessId1");

                    b.Navigation("Doctor");

                    b.Navigation("TreatmentProcess");
                });

            modelBuilder.Entity("FertilityClinic.DAL.Models.LabTestResult", b =>
                {
                    b.HasOne("FertilityClinic.DAL.Models.Doctor", "Doctor")
                        .WithMany("LabTestResults")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FertilityClinic.DAL.Models.LabTestSchedule", "LabTestSchedule")
                        .WithMany()
                        .HasForeignKey("LabTestScheduleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("LabTestSchedule");
                });

            modelBuilder.Entity("FertilityClinic.DAL.Models.LabTestSchedule", b =>
                {
                    b.HasOne("FertilityClinic.DAL.Models.Doctor", "Doctor")
                        .WithMany("LabTestSchedules")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FertilityClinic.DAL.Models.TreatmentProcess", "TreatmentProcess")
                        .WithMany()
                        .HasForeignKey("TreatmentProcessId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FertilityClinic.DAL.Models.TreatmentProcess", null)
                        .WithMany("LabTestSchedules")
                        .HasForeignKey("TreatmentProcessId1");

                    b.Navigation("Doctor");

                    b.Navigation("TreatmentProcess");
                });

            modelBuilder.Entity("FertilityClinic.DAL.Models.MarriageCertificate", b =>
                {
                    b.HasOne("FertilityClinic.DAL.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("FertilityClinic.DAL.Models.Notification", b =>
                {
                    b.HasOne("FertilityClinic.DAL.Models.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FertilityClinic.DAL.Models.Patient", b =>
                {
                    b.HasOne("FertilityClinic.DAL.Models.User", "User")
                        .WithOne("Patient")
                        .HasForeignKey("FertilityClinic.DAL.Models.Patient", "UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FertilityClinic.DAL.Models.Review", b =>
                {
                    b.HasOne("FertilityClinic.DAL.Models.Doctor", "Doctor")
                        .WithMany("Reviews")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FertilityClinic.DAL.Models.Patient", "Patient")
                        .WithMany("Reviews")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("FertilityClinic.DAL.Models.TreatmentProcess", b =>
                {
                    b.HasOne("FertilityClinic.DAL.Models.Doctor", "Doctor")
                        .WithMany("TreatmentProcesses")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FertilityClinic.DAL.Models.MarriageCertificate", "MarriageCertificate")
                        .WithMany("TreatmentProcesses")
                        .HasForeignKey("MarriageCertificateId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FertilityClinic.DAL.Models.Patient", "Patient")
                        .WithMany("TreatmentProcesses")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FertilityClinic.DAL.Models.TreatmentMethod", "TreatmentMethod")
                        .WithMany("TreatmentProcesses")
                        .HasForeignKey("TreatmentMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("MarriageCertificate");

                    b.Navigation("Patient");

                    b.Navigation("TreatmentMethod");
                });

            modelBuilder.Entity("FertilityClinic.DAL.Models.Doctor", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("InjectionSchedules");

                    b.Navigation("InseminationResults");

                    b.Navigation("InseminationSchedules");

                    b.Navigation("LabTestResults");

                    b.Navigation("LabTestSchedules");

                    b.Navigation("Reviews");

                    b.Navigation("TreatmentProcesses");
                });

            modelBuilder.Entity("FertilityClinic.DAL.Models.MarriageCertificate", b =>
                {
                    b.Navigation("TreatmentProcesses");
                });

            modelBuilder.Entity("FertilityClinic.DAL.Models.Patient", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Reviews");

                    b.Navigation("TreatmentProcesses");
                });

            modelBuilder.Entity("FertilityClinic.DAL.Models.TreatmentMethod", b =>
                {
                    b.Navigation("TreatmentProcesses");
                });

            modelBuilder.Entity("FertilityClinic.DAL.Models.TreatmentProcess", b =>
                {
                    b.Navigation("InjectionSchedules");

                    b.Navigation("InseminationSchedules");

                    b.Navigation("LabTestSchedules");
                });

            modelBuilder.Entity("FertilityClinic.DAL.Models.User", b =>
                {
                    b.Navigation("Blogs");

                    b.Navigation("Doctor")
                        .IsRequired();

                    b.Navigation("Notifications");

                    b.Navigation("Patient")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
